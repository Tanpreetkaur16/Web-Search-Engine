Python Functions - javatpoint⇧ SCROLL TO TOP Home Python If Else For Loop Function Array String Regex List Set Tuple Dictionary Programs Numpy Interview QuestionsPython TutorialPython TutorialPython FeaturesPython HistoryPython ApplicationsPython InstallPython ExamplePython VariablesPython Data TypesPython KeywordsPython LiteralsPython OperatorsPython CommentsPython If elsePython LoopsPython For LoopPython While LoopPython BreakPython ContinuePython PassPython StringsPython ListsPython TuplesPython List Vs TuplePython SetsPython DictionaryPython FunctionsPython Built-in FunctionsPython Lambda FunctionsPython Files I/OPython ModulesPython ExceptionsPython DatePython RegexPython Sending EmailRead CSV FileWrite CSV FileRead Excel FileWrite Excel FilePython AssertPython List ComprehensionPython Collection ModulePython Math ModulePython OS ModulePython Random ModulePython Statistics ModulePython Sys ModulePython IDEsPython ArraysCommand Line ArgumentsPython Magic MethodPython Stack & QueuePySpark MLlibPython DecoratorPython GeneratorsWeb Scraping Using PythonPython JSONPython ItertoolsPython MultiprocessingHow to Calculate Distance between Two Points using GEOPYGmail API in PythonHow to Plot the Google Map using folium package in PythonGrid Search in PythonPython High Order Functionnsetools in PythonPython program to find the nth Fibonacci NumberPython OpenCV object detectionPython SimpleImputer moduleSecond Largest Number in PythonPython OOPsPython OOPs ConceptsPython Object ClassPython ConstructorsPython InheritanceAbstraction in PythonPython MySQLEnvironment SetupDatabase ConnectionCreating New DatabaseCreating TablesInsert OperationRead OperationUpdate OperationJoin OperationPerforming TransactionsPython MongoDBPython MongoDBPython SQLitePython SQLitePython Questions. How to install Python in WindowsHow to reverse a string in PythonHow to read CSV file in PythonHow to run Python ProgramHow to take input in PythonHow to convert list to string in PythonHow to append element in the listHow to compare two lists in PythonHow to convert int to string in PythonHow to create a dictionary in PythonHow to create a virtual environment in PythonHow to declare a variable in PythonHow to install matplotlib in PythonHow to install OpenCV in PythonHow to print in same line in PythonHow to read JSON file in PythonHow to read a text file in PythonHow to use for loop in PythonIs Python scripting languageHow long does it take to learn PythonHow to concatenate two strings in PythonHow to connect Database in PythonHow to convert list to dictionary in PythonHow to declare a global variable in PythonHow to reverse a number in PythonWhat is an object in PythonWhich is the fastest implementation of PythonHow to clear Python shellHow to create a DataFrames in PythonHow to develop a game in PythonHow to install Tkinter in PythonHow to plot a graph in PythonHow to print pattern in PythonHow to remove an element from a list in PythonHow to Round number in PythonHow to sort a dictionary in PythonStrong Number in PythonHow to Convert Text to Speech in Python Bubble Sort in PythonLogging in PythonInsertion Sort in PythonBinary Search in PythonLinear Search in PythonPython vs ScalaQueue in PythonStack in PythonHeap Sort in PythonPalindrome program in pythonProgram of Cumulative sum in pythonMerge Sort in PythonPython MatrixPython Unit TestingForensics & VirtualizationBest Books to Learn PythonBest Books to Learn DjangoGCD of two number in pythonPython Program to generate a Random StringHow to One Hot Encode Sequence Data in PythonHow to write square root in PythonPointer in PythonPython 2D arrayPython Memory ManagementPython Libraries for Data VisualizationHow to call a function in PythonGit Modules in PythonTop Python Frameworks for GamingPython Audio ModulesWikipedia Module in PythonPython random randrange()Permutation and Combination in PythonGetopt module in PythonMerge two Dictionaries in PythonMultithreading in Python 3Static in PythonHow to get the current date in Pythonargparse in PythonPython tqdm ModuleCaesar Cipher in PythonTokenizer in PythonHow to add two lists in PythonShallow Copy and Deep Copy in PythonAtom PythonContains in PythonLabel Encoding in PythonDjango vs. Node JSPython FrameworksHow to create a vector in Python using NumPyPickle Module of PythonHow to convert Bytes to string in PythonPython Program to Find AnagramHow to convert List to SetPython vs JavaScriptPython Holidays ModuleFuzzyWuzzy Python LibraryDask PythonDask Python (Part 2)Mode in PythonMenu-Driven Programs in PythonPython Array vs. ListWhat is duck typing in PythonPEP 8 in PythonPython User GroupsBasic Commands in PythonF String in PythonHow Brython WorksHow to use Brython in the BrowserArima Model in PythonPython Modulus OperatorMATLAB vs. PythonMethod Resolution Order in PythonMonkey Patching in PythonPython __call__ methodPython heapq modulePython SubstringProject ideas for Python BeginnersPython FakerFizz-Buzz Program in PythonTabula PythonPython Program to Print Prime Factor of Given NumberPython Program to Print Pascal TriangleNamedTuple in PythonOrderedDict in PythonT-Test in PythonPython return statementGetter and Setter in PythonEnum class in PythonDestructors in PythonCurve Fit in PythonConverting CSV to JSON in PythonUnderscore (_) in PythonSet vs List in PythonLocating and Executing ModulesFlatten List in PythonPair Plot in PythonData Hiding in PythonPython Program to Find Intersection of Two ListsHow to Create Requirements.txt File in PythonTic-Tac-Toe in PythonPython Asynchronous Programming - asyncio and awaitPython main() functionstrftime() function in PythonVerbose Flag in Python RegexPython AST ModulePython Requests Module - HTTP RequestShutil Module in PythonPython epoch to DatetimePython del StatementLooping technique in PythonMetaprogramming with Metaclasses in PythonPrecision Handling in PythonPython Join Liststrip() function in PythonGradient Descent AlgorithmPrettytable in PythonSentiment Analysis in PythonConvert Python List to NumPy ArraysTraceback in PythonTime clock() Method in PythonDeque in PythonDictionary Comprehension in PythonPython Data AnalyticsPython seek() MethodTernary Operator in PythonHow to Calculate the Area of the Circle using PythonHow to Write in Text File using PythonPython KeyErrorPython super() Functionmax() function in PythonFraction Module in PythonPopular Python Framework to Build APIHow to Check Python versionPython %s - String FormattingPython seaborn LibraryCountplot in Pythonrange() Vs. Xrange() PythonWordcloud Package in PythonConvert dataframe into listANOVA Test in PythonPython program to find compound interestAnsible in PythonPython Important Tips and TricksPython CoroutinesDouble Underscores in Pythonre.search() VS re.findall() in Python RegexHow to install statsmodels in PythonCos in Pythonvif in Python__add__ Method in PythonEthical Hacking with PythonClass Variable vs InstancePerfect Number in PythonEOL in PythonPython Program to convert Hexadecimal String to Decimal StringDifferent Methods in Python for Swapping Two Numbers without using third variableHow to Change Plot Size in MatplotlibHow to Get the Zip Code in PythonEel in PythonAssignment Operators in PythonSpeech Recognition pythonYield vs Return in PythonGraphene PythonName Mangling in PythonPython combination without itertoolsPython ComprehensionsInfluxDB in PythonKafka Tutorial in PythonAugmented Assignment Expressions in PythonPython (x,y) SoftwarePython Event-Driven programmingPython SemaphorePython sorted reverseAutomorphic Number in Pythonsizeof in PythonPython Program for accepting the strings which contains all vowelsClass-based views vs Function-Based ViewsHow to handle cookies in Djangoagg() function in PythonAmicable Numbers in PythonContext Manager in PythonCreate BMI Calculator using PythonString to Binary in PythonWhat is script mode in PythonBest Python libraries for Machine LearningPython Program to Display Calendar of Given YearHow to open URL in PythonBroken Pipe Error in PythonCode Template for Creating Objects in PythonPython program to calculate the best time to buy and sell stockTuple to String in PythonKadane's Algorithm in PythonLoggers in DjangoWeather App in DjangoMissing Data Conundrum: Exploration and Imputation TechniquesDifferent Methods of Array Rotation in PythonWhat is Operator Overloading in PythonDefaultdict in PythonOperator Module in PythonSpinner Widget in the kivy Library of PythonNumber Plate Recognition using PythonObfuscating a Python programConvert string to dictionary in PythonConvert string to JSON in PythonDBSCAN algorithm in PythonHow to Write a Code for Printing the Python Exception/Error HierarchyPrincipal Component Analysis (PCA) with PythonPython Program to Find Number of Days Between Two Given DatesObject Recognition using PythonPython VLC moduleSet to list in PythonString to int in PythonInternet of Things with PythonPython pysftp moduleAmazing hacks of PythonAverage of list in PythonCheck Installed Modules in Pythonchoice() in PythonConvert List to dataframe in PythonConvert String to Float in PythonDecorators with Parameters in PythonDynamic Typing in PythonFabs in PythonHow to Remove Decimal in PythonPython ClosurePython Glob ModuleWriting a Python ModuleModules vs Packages in PythonSNMP module in PythonAverage of list in PythonAppend vs Extend vs Insert in PythonHow to Remove Duplicates from a list in PythonRemove Multiple Characters from a String in PythonShuffle in Pythonfloor() and ceil() Functions in Pythonsqrt(): Math Function of PythonPython yfinance ModuleDifflib module in PythonConvert the Column Type from String to Datetime Format in Pandas DataFramePython wxPython ModuleRandom Uniform PythonRelational Operators in PythonString to List in PythonChatbot in PythonHow to Convert float to int in PythonMultiply All Elements in list of Pythonmodule vs function in PythonReverse a tuple in PythonTuple to Dictionary in Pythondatetime.timedelta() Function of PythonPython Bio ModulePython Dash ModuleHow to Select rows in Pandas DataFrame Based on ConditionsTypecasting in PythonDateutil module in PythonGetpass module in PythonPython Wand libraryGenerate a QR Code using PythonBest Python PDF LibraryPython Cachetools ModulePython Cmdparser ModulePython Dash modulePython Emoji ModulePython Nmap ModulePython PyLab ModuleWorking with PDF files in PythonPDF Handling in PythonManipulating PDF using PythonList All Functions from a Python ModulePython list of DictionariesPython Shelve ModuleCreating Interactive PDF forms using PythonPython Newspaper ModuleHow to Connect Wi-Fi using PythonBest Python Libraries used for Ethical HackingWindows System Administration Management using PythonIndentation Error in PythonPython imaplib ModulePython lxml ModulePython MayaVi ModulePython os.listdir() methodPython Modules for AutomationData Visualization in Python using Bokeh LibraryHow to Plot glyphs over a Google Map by using Bokeh Library in PythonHow to Plot a Pie Chart using Bokeh Library in PythonHow to Read Contents of PDF using OCR in PythonGrammar and Spell Checker in PythonConverting HTML to PDF files using PythonReadlines in PythonHow to Plot Multiple Lines on a Graph Using Bokeh in Pythonbokeh.plotting.figure.circle_x() Function in Pythonbokeh.plotting.figure.diamond_cross() Function in PythonHow to Plot Rays on a Graph using Bokeh in PythonImage Steganography using PythonInconsistent use of tabs and spaces in indentationHow to Plot Multiple Plots using Bokeh in PythonHow to Make an Area Plot in Python using BokehPython ChemPy ModulePython memory-profiler ModulePython Phonenumbers ModulePython Platform ModuleTypeError string indices must be an integerTime Series Forecasting with Prophet in PythonPython Pexpect ModulePython Optparse Moduleint object is not iterablePython Peewee LibrarySome Cryptocurrency Libraries for PythonBuilding a Blockchain using PythonHuffman Coding using PythonNested Dictionary in PythonCollections.UserString in PythonHow to Customize Legends with MatplotlibMatplotlib legend in subplotMorphological Operations in Image Processing in PythonRole of Python in Artificial IntelligencePython Instagramy ModulePython pprint ModulePython PrimePy ModuleAndroid Development using PythonPython fbchat libraryArtificial Intelligence in Cybersecurity: Pitting Algorithms vs AlgorithmsUnderstanding The Recognition Pattern of Artificial IntelligenceWhen and How to Leverage Lambda Architecture in Big DataWhy Should We Learn Python for Data ScienceHow to Change the "legend" Position in MatplotlibHow to Check if Element Exists in List in PythonHow to Check Spellings of Given Words using Enchant in PythonPython Program to Count the Number of Matching Characters in a Pair of StringPing Pong Game Using Turtle in PythonPython Function to Display CalendarPython Program for Calculating the Sum of Squares of First n Natural NumbersPython Program for How to Check if a Given Number is Fibonacci Number or Notrandint() Function in PythonVisualize Tiff File using Matplotlib and GDAL in Pythonrarfile module in PythonStemming Words using PythonPython Program for Word Guessing GameBlockchain in Healthcare: Innovations & OpportunitiesSnake Game in Python using Turtle ModuleHow to Find Armstrong Numbers between two given IntegersCelery Tutorial Using PythonRSME - Root Mean Square Error in PythonBuilding a Twitter Bot using PythonPython Progressbar ModulePython Pronouncing ModulePython PyAutoGUI ModulePython Pyperclip ModuleHow to Generate UUID in PythonPython Top 10 Libraries to Learn in 2022Reading NetCDF Data using PythonThe reprlib module in PythonHow to take Multiple Input from User in PythonPython zlib LibraryPython Queue ModulePython YAML ParserEffective Root Searching Algorithms in PythonPython Bz2 ModulePython IPaddress ModulePython PyLint ModuleHow to Process XML in PythonBisect Algorithm Functions in PythonCreating and Updating PowerPoint Presentation using PythonHow to change the size of figure drawn with matplotlibKeyboard Module in PythonPython Pyfiglet ModuleCreating an MCQ Quiz Game in PythonStatistic with PythonWhat is GIL in PythonBasic Python for Java DevelopersHow to Download YouTube Videos Using Python ScriptsTraffic Flow Simulation in PythonHow to Merge and Sort Two Lists in PythonMetacharacters in PythonWrite the Python Program to Print All Possible Combination of IntegersModulo String Formatting in PythonCounters in PythonPython pyautogui LibraryHow to Draw the Mandelbrot Set in PythonPython Dbm ModuleWebcam Motion Detector in PythonGraphQL Implementation in DjangoHow to Implement Protobuf in PythonPyQt library in PythonHow to Prettify Data Structures with Pretty Print in PythonEncrypt a Password in Python Using bcryptPyramid Framework in PythonBuilding a Telegram bot using PythonWeb2py Framework in PythonPython os.chdir() MethodBalancing Parentheses in PythonHow to Provide Multiple Constructors in Python ClassesProfiling the Python codeBuild a Dice-Rolling Application with PythonEmail module in PythonEssential Recursion Programs in PythonHow to Design Hashset in PythonHow to Extract YouTube Data in PythonHow to Solve Stock Span Problem Using PythonSelection Sort in Pythoninfo() Function in PythonTwo Sum Problem: Python Solution of Two sum problem of Given ListWrite a Python Program to Check a List Contains Duplicate ElementWrite Python Program to Search an Element in Sorted ArrayPathlib module in PythonCreate a Real Time Voice Translator using PythonHow to Sort Tuple in PythonAdvantages of Python that made it so Popular and its Major ApplicationsLibrary in PythonPackages of Data Visualization in PythonPython Tkinter (GUI)Python TkinterTkinter ButtonTkinter CanvasTkinter CheckbuttonTkinter EntryTkinter FrameTkinter LabelTkinter ListboxTkinter MenubuttonTkinter MenuTkinter MessageTkinter RadiobuttonTkinter ScaleTkinter ScrollbarTkinter TextTkinter ToplevelTkinter SpinboxTkinter PanedWindowTkinter LabelFrameTkinter MessageBoxPython Web BlockerIntroductionBuilding Python ScriptScript Deployment on LinuxScript Deployment on WindowsPython MCQPython MCQPython MCQ Part 2Related TutorialsNumPy TutorialDjango TutorialFlask TutorialPandas TutorialPytorch TutorialPygame TutorialMatplotlib TutorialOpenCV TutorialOpenpyxl TutorialPython CGIPython Design PatternPython ProgramsPython Programsnext →← prevPython FunctionFunctions are the most important aspect of an application. A function can be defined as the organized block of reusable code, which can be called whenever required.Python allows us to divide a large program into the basic building blocks known as a function. The function contains the set of programming statements enclosed by {}. A function can be called multiple times to provide reusability and modularity to the Python program.The Function helps to programmer to break the program into the smaller part. It organizes the code very effectively and avoids the repetition of the code. As the program grows, function makes the program more organized.Python provide us various inbuilt functions like  or . Although, the user can create its functions, which can be called user-defined functions.range()print()There are mainly two types of functions. - The user-defined functions are those define by the  to perform the specific task.User-define functionsuser - The built-in functions are those functions that are  in Python.Built-in functionspre-definedIn this tutorial, we will discuss the user define functions.Advantage of Functions in PythonThere are the following advantages of Python functions.Using functions, we can avoid rewriting the same logic/code again and again in a program.We can call Python functions multiple times in a program and anywhere in a program.We can track a large Python program easily when it is divided into multiple functions.Reusability is the main achievement of Python functions.However, Function calling is always overhead in a Python program.Creating a FunctionPython provides the  keyword to define the function. The syntax of the define function is given below.defSyntax: def my_function(parameters): function_block return expression Let's understand the syntax of functions definition.The  keyword, along with the function name is used to define the function.defThe identifier rule must follow the function name.A function accepts the parameter (argument), and they can be optional.The function block is started with the colon (:), and block statements must be at the same indentation.The  statement is used to return the value. A function can have only one returnreturnFunction CallingIn Python, after the function is created, we can call it from another function. A function must be defined before the function call; otherwise, the Python interpreter gives an error. To call the function, use the function name followed by the parentheses.Consider the following example of a simple example that prints the message "Hello World". #function definition def hello_world(): print("hello world") # function calling hello_world() Output:hello world The return statementThe return statement is used at the end of the function and returns the result of the function. It terminates the function execution and transfers the result where the function is called. The return statement cannot be used outside of the function.Syntax return [expression_list] It can contain the expression which gets evaluated and value is returned to the caller function. If the return statement has no expression or does not exist itself in the function then it returns the  object.NoneConsider the following example:Example 1 # Defining function def sum(): a = 10 b = 20 c = a+b return c # calling sum() function in print statement print("The sum is:",sum()) Output:The sum is: 30 In the above code, we have defined the function named  and it has a statement  which computes the given values, and the result is returned by the return statement to the caller function.sum,c = a+b,Example 2 Creating function without return statement # Defining function def sum(): a = 10 b = 20 c = a+b # calling sum() function in print statement print(sum()) Output:None In the above code, we have defined the same function without the return statement as we can see that the  function returned the  object to the caller function.sum()NoneArguments in functionThe arguments are types of information which can be passed into the function. The arguments are specified in the parentheses. We can pass any number of arguments, but they must be separate them with a comma.Consider the following example, which contains a function that accepts a string as the argument.Example 1 #defining the function def func (name): print("Hi ",name) #calling the function func("Devansh") Output:Hi Devansh Example 2 #Python function to calculate the sum of two variables #defining the function def sum (a,b): return a+b; #taking values from the user a = int(input("Enter a: ")) b = int(input("Enter b: ")) #printing the sum of a and b print("Sum = ",sum(a,b)) Output:Enter a: 10 Enter b: 20 Sum = 30 Call by reference in PythonIn Python, call by reference means passing the actual value as an argument in the function. All the functions are called by reference, i.e., all the changes made to the reference inside the function revert back to the original value referred by the reference.Example 1 Passing Immutable Object (List) #defining the function def change_list(list1): list1.append(20) list1.append(30) print("list inside function = ",list1) #defining the list list1 = [10,30,40,50] #calling the function change_list(list1) print("list outside function = ",list1) Output:list inside function = [10, 30, 40, 50, 20, 30] list outside function = [10, 30, 40, 50, 20, 30] Example 2 Passing Mutable Object (String) #defining the function def change_string (str): str = str + " Hows you " print("printing the string inside function :",str) string1 = "Hi I am there" #calling the function change_string(string1) print("printing the string outside function :",string1) Output:printing the string inside function : Hi I am there Hows you printing the string outside function : Hi I am there Types of argumentsThere may be several types of arguments which can be passed at the time of function call.Required argumentsKeyword argumentsDefault argumentsVariable-length argumentsRequired ArgumentsTill now, we have learned about function calling in Python. However, we can provide the arguments at the time of the function call. As far as the required arguments are concerned, these are the arguments which are required to be passed at the time of function calling with the exact match of their positions in the function call and function definition. If either of the arguments is not provided in the function call, or the position of the arguments is changed, the Python interpreter will show the error.Consider the following example.Example 1 def func(name): message = "Hi "+name return message name = input("Enter the name:") print(func(name)) Output:Enter the name: John Hi John Example 2 #the function simple_interest accepts three arguments and returns the simple interest accordingly def simple_interest(p,t,r): return (p*t*r)/100 p = float(input("Enter the principle amount? ")) r = float(input("Enter the rate of interest? ")) t = float(input("Enter the time in years? ")) print("Simple Interest: ",simple_interest(p,r,t)) Output:Enter the principle amount: 5000 Enter the rate of interest: 5 Enter the time in years: 3 Simple Interest: 750.0 Example 3 #the function calculate returns the sum of two arguments a and b def calculate(a,b): return a+b calculate(10) # this causes an error as we are missing a required arguments b. Output:TypeError: calculate() missing 1 required positional argument: 'b' Default ArgumentsPython allows us to initialize the arguments at the function definition. If the value of any of the arguments is not provided at the time of function call, then that argument can be initialized with the value given in the definition even if the argument is not specified at the function call.Example 1 def printme(name,age=22): print("My name is",name,"and age is",age) printme(name = "john") Output:My name is John and age is 22 Example 2 def printme(name,age=22): print("My name is",name,"and age is",age) printme(name = "john") #the variable age is not passed into the function however the default value of age is considered in the function printme(age = 10,name="David") #the value of age is overwritten here, 10 will be printed as age Output:My name is john and age is 22 My name is David and age is 10 Variable-length Arguments (*args)In large projects, sometimes we may not know the number of arguments to be passed in advance. In such cases, Python provides us the flexibility to offer the comma-separated values which are internally treated as tuples at the function call. By using the variable-length arguments, we can pass any number of arguments.However, at the function definition, we define the variable-length argument using the  (star) as *<variable - name >.*argsConsider the following example.Example def printme(*names): print("type of passed argument is ",type(names)) print("printing the passed arguments...") for name in names: print(name) printme("john","David","smith","nick") Output:type of passed argument is <class 'tuple'> printing the passed arguments... john David smith nick In the above code, we passed  as variable-length argument. We called the function and passed values which are treated as tuple internally. The tuple is an iterable sequence the same as the list. To print the given values, we iterated  using for loop.*names*arg namesKeyword arguments(**kwargs)Python allows us to call the function with the keyword arguments. This kind of function call will enable us to pass the arguments in the random order.The name of the arguments is treated as the keywords and matched in the function calling and definition. If the same match is found, the values of the arguments are copied in the function definition.Consider the following example.Example 1 #function func is called with the name and message as the keyword arguments def func(name,message): print("printing the message with",name,"and ",message) #name and message is copied with the values John and hello respectively func(name = "John",message="hello") Output:printing the message with John and hello Example 2 providing the values in different order at the calling #The function simple_interest(p, t, r) is called with the keyword arguments the order of arguments doesn't matter in this case def simple_interest(p,t,r): return (p*t*r)/100 print("Simple Interest: ",simple_interest(t=10,r=10,p=1900)) Output:Simple Interest: 1900.0 If we provide the different name of arguments at the time of function call, an error will be thrown.Consider the following example.Example 3 #The function simple_interest(p, t, r) is called with the keyword arguments. def simple_interest(p,t,r): return (p*t*r)/100 # doesn't find the exact match of the name of the arguments (keywords) print("Simple Interest: ",simple_interest(time=10,rate=10,principle=1900)) Output:TypeError: simple_interest() got an unexpected keyword argument 'time' The Python allows us to provide the mix of the required arguments and keyword arguments at the time of function call. However, the required argument must not be given after the keyword argument, i.e., once the keyword argument is encountered in the function call, the following arguments must also be the keyword arguments.Consider the following example.Example 4 def func(name1,message,name2): print("printing the message with",name1,",",message,",and",name2) #the first argument is not the keyword argument func("John",message="hello",name2="David") Output:printing the message with John , hello ,and David The following example will cause an error due to an in-proper mix of keyword and required arguments being passed in the function call.Example 5 def func(name1,message,name2): print("printing the message with",name1,",",message,",and",name2) func("John",message="hello","David") Output:SyntaxError: positional argument follows keyword argument Python provides the facility to pass the multiple keyword arguments which can be represented as . It is similar as the  but it stores the argument in the dictionary format.**kwargs*argsThis type of arguments is useful when we do not know the number of arguments in advance.Consider the following example:Example 6: Many arguments using Keyword argument def food(**kwargs): print(kwargs) food(a="Apple") food(fruits="Orange", Vagitables="Carrot") Output:{'a': 'Apple'} {'fruits': 'Orange', 'Vagitables': 'Carrot'} Scope of variablesThe scopes of the variables depend upon the location where the variable is being declared. The variable declared in one part of the program may not be accessible to the other parts.In python, the variables are defined with the two types of scopes.Global variablesLocal variablesThe variable defined outside any function is known to have a global scope, whereas the variable defined inside a function is known to have a local scope.Consider the following example.Example 1 Local Variable def print_message(): message = "hello !! I am going to print a message." # the variable message is local to the function itself print(message) print_message() print(message) # this will cause an error since a local variable cannot be accessible here. Output:hello !! I am going to print a message. File "/root/PycharmProjects/PythonTest/Test1.py", line 5, in print(message) NameError: name 'message' is not defined Example 2 Global Variable def calculate(*args): sum=0 for arg in args: sum = sum +arg print("The sum is",sum) sum=0 calculate(10,20,30) #60 will be printed as the sum print("Value of sum outside the function:",sum) # 0 will be printed Output: Output:The sum is 60 Value of sum outside the function: 0 Next TopicPython Built-in Functions← prevnext → For Videos Join Our Youtube Channel:  Join NowFeedbackSend your Feedback to [email protected]Help Others, Please ShareLearn Latest TutorialsSplunkSPSSSwaggerTransact-SQLTumblrReactJSRegexReinforcement LearningR ProgrammingRxJSReact NativePython Design PatternsPython PillowPython TurtleKerasPreparationAptitudeReasoningVerbal AbilityInterview QuestionsCompany QuestionsTrending TechnologiesArtificial IntelligenceAWSSeleniumCloud ComputingHadoopReactJSData ScienceAngular 7BlockchainGitMachine LearningDevOpsB.Tech / MCADBMSData StructuresDAAOperating SystemComputer NetworkCompiler DesignComputer OrganizationDiscrete MathematicsEthical HackingComputer GraphicsSoftware EngineeringWeb TechnologyCyber SecurityAutomataC ProgrammingC++Java.NetPythonProgramsControl SystemData MiningData WarehouseJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on , to get more information about given services. [email protected]Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at Duration: 1 week to 2 week[email protected]Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact UsSubscribe UsPrivacy PolicySitemapAbout Me© Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.