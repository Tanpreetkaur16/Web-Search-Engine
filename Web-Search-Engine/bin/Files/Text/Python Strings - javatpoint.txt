Python Strings - javatpoint⇧ SCROLL TO TOP Home Python If Else For Loop Function Array String Regex List Set Tuple Dictionary Programs Numpy Interview QuestionsPython TutorialPython TutorialPython FeaturesPython HistoryPython ApplicationsPython InstallPython ExamplePython VariablesPython Data TypesPython KeywordsPython LiteralsPython OperatorsPython CommentsPython If elsePython LoopsPython For LoopPython While LoopPython BreakPython ContinuePython PassPython StringsPython ListsPython TuplesPython List Vs TuplePython SetsPython DictionaryPython FunctionsPython Built-in FunctionsPython Lambda FunctionsPython Files I/OPython ModulesPython ExceptionsPython DatePython RegexPython Sending EmailRead CSV FileWrite CSV FileRead Excel FileWrite Excel FilePython AssertPython List ComprehensionPython Collection ModulePython Math ModulePython OS ModulePython Random ModulePython Statistics ModulePython Sys ModulePython IDEsPython ArraysCommand Line ArgumentsPython Magic MethodPython Stack & QueuePySpark MLlibPython DecoratorPython GeneratorsWeb Scraping Using PythonPython JSONPython ItertoolsPython MultiprocessingHow to Calculate Distance between Two Points using GEOPYGmail API in PythonHow to Plot the Google Map using folium package in PythonGrid Search in PythonPython High Order Functionnsetools in PythonPython program to find the nth Fibonacci NumberPython OpenCV object detectionPython SimpleImputer moduleSecond Largest Number in PythonPython OOPsPython OOPs ConceptsPython Object ClassPython ConstructorsPython InheritanceAbstraction in PythonPython MySQLEnvironment SetupDatabase ConnectionCreating New DatabaseCreating TablesInsert OperationRead OperationUpdate OperationJoin OperationPerforming TransactionsPython MongoDBPython MongoDBPython SQLitePython SQLitePython Questions. How to install Python in WindowsHow to reverse a string in PythonHow to read CSV file in PythonHow to run Python ProgramHow to take input in PythonHow to convert list to string in PythonHow to append element in the listHow to compare two lists in PythonHow to convert int to string in PythonHow to create a dictionary in PythonHow to create a virtual environment in PythonHow to declare a variable in PythonHow to install matplotlib in PythonHow to install OpenCV in PythonHow to print in same line in PythonHow to read JSON file in PythonHow to read a text file in PythonHow to use for loop in PythonIs Python scripting languageHow long does it take to learn PythonHow to concatenate two strings in PythonHow to connect Database in PythonHow to convert list to dictionary in PythonHow to declare a global variable in PythonHow to reverse a number in PythonWhat is an object in PythonWhich is the fastest implementation of PythonHow to clear Python shellHow to create a DataFrames in PythonHow to develop a game in PythonHow to install Tkinter in PythonHow to plot a graph in PythonHow to print pattern in PythonHow to remove an element from a list in PythonHow to Round number in PythonHow to sort a dictionary in PythonStrong Number in PythonHow to Convert Text to Speech in Python Bubble Sort in PythonLogging in PythonInsertion Sort in PythonBinary Search in PythonLinear Search in PythonPython vs ScalaQueue in PythonStack in PythonHeap Sort in PythonPalindrome program in pythonProgram of Cumulative sum in pythonMerge Sort in PythonPython MatrixPython Unit TestingForensics & VirtualizationBest Books to Learn PythonBest Books to Learn DjangoGCD of two number in pythonPython Program to generate a Random StringHow to One Hot Encode Sequence Data in PythonHow to write square root in PythonPointer in PythonPython 2D arrayPython Memory ManagementPython Libraries for Data VisualizationHow to call a function in PythonGit Modules in PythonTop Python Frameworks for GamingPython Audio ModulesWikipedia Module in PythonPython random randrange()Permutation and Combination in PythonGetopt module in PythonMerge two Dictionaries in PythonMultithreading in Python 3Static in PythonHow to get the current date in Pythonargparse in PythonPython tqdm ModuleCaesar Cipher in PythonTokenizer in PythonHow to add two lists in PythonShallow Copy and Deep Copy in PythonAtom PythonContains in PythonLabel Encoding in PythonDjango vs. Node JSPython FrameworksHow to create a vector in Python using NumPyPickle Module of PythonHow to convert Bytes to string in PythonPython Program to Find AnagramHow to convert List to SetPython vs JavaScriptPython Holidays ModuleFuzzyWuzzy Python LibraryDask PythonDask Python (Part 2)Mode in PythonMenu-Driven Programs in PythonPython Array vs. ListWhat is duck typing in PythonPEP 8 in PythonPython User GroupsBasic Commands in PythonF String in PythonHow Brython WorksHow to use Brython in the BrowserArima Model in PythonPython Modulus OperatorMATLAB vs. PythonMethod Resolution Order in PythonMonkey Patching in PythonPython __call__ methodPython heapq modulePython SubstringProject ideas for Python BeginnersPython FakerFizz-Buzz Program in PythonTabula PythonPython Program to Print Prime Factor of Given NumberPython Program to Print Pascal TriangleNamedTuple in PythonOrderedDict in PythonT-Test in PythonPython return statementGetter and Setter in PythonEnum class in PythonDestructors in PythonCurve Fit in PythonConverting CSV to JSON in PythonUnderscore (_) in PythonSet vs List in PythonLocating and Executing ModulesFlatten List in PythonPair Plot in PythonData Hiding in PythonPython Program to Find Intersection of Two ListsHow to Create Requirements.txt File in PythonTic-Tac-Toe in PythonPython Asynchronous Programming - asyncio and awaitPython main() functionstrftime() function in PythonVerbose Flag in Python RegexPython AST ModulePython Requests Module - HTTP RequestShutil Module in PythonPython epoch to DatetimePython del StatementLooping technique in PythonMetaprogramming with Metaclasses in PythonPrecision Handling in PythonPython Join Liststrip() function in PythonGradient Descent AlgorithmPrettytable in PythonSentiment Analysis in PythonConvert Python List to NumPy ArraysTraceback in PythonTime clock() Method in PythonDeque in PythonDictionary Comprehension in PythonPython Data AnalyticsPython seek() MethodTernary Operator in PythonHow to Calculate the Area of the Circle using PythonHow to Write in Text File using PythonPython KeyErrorPython super() Functionmax() function in PythonFraction Module in PythonPopular Python Framework to Build APIHow to Check Python versionPython %s - String FormattingPython seaborn LibraryCountplot in Pythonrange() Vs. Xrange() PythonWordcloud Package in PythonConvert dataframe into listANOVA Test in PythonPython program to find compound interestAnsible in PythonPython Important Tips and TricksPython CoroutinesDouble Underscores in Pythonre.search() VS re.findall() in Python RegexHow to install statsmodels in PythonCos in Pythonvif in Python__add__ Method in PythonEthical Hacking with PythonClass Variable vs InstancePerfect Number in PythonEOL in PythonPython Program to convert Hexadecimal String to Decimal StringDifferent Methods in Python for Swapping Two Numbers without using third variableHow to Change Plot Size in MatplotlibHow to Get the Zip Code in PythonEel in PythonAssignment Operators in PythonSpeech Recognition pythonYield vs Return in PythonGraphene PythonName Mangling in PythonPython combination without itertoolsPython ComprehensionsInfluxDB in PythonKafka Tutorial in PythonAugmented Assignment Expressions in PythonPython (x,y) SoftwarePython Event-Driven programmingPython SemaphorePython sorted reverseAutomorphic Number in Pythonsizeof in PythonPython Program for accepting the strings which contains all vowelsClass-based views vs Function-Based ViewsHow to handle cookies in Djangoagg() function in PythonAmicable Numbers in PythonContext Manager in PythonCreate BMI Calculator using PythonString to Binary in PythonWhat is script mode in PythonBest Python libraries for Machine LearningPython Program to Display Calendar of Given YearHow to open URL in PythonBroken Pipe Error in PythonCode Template for Creating Objects in PythonPython program to calculate the best time to buy and sell stockTuple to String in PythonKadane's Algorithm in PythonLoggers in DjangoWeather App in DjangoMissing Data Conundrum: Exploration and Imputation TechniquesDifferent Methods of Array Rotation in PythonWhat is Operator Overloading in PythonDefaultdict in PythonOperator Module in PythonSpinner Widget in the kivy Library of PythonNumber Plate Recognition using PythonObfuscating a Python programConvert string to dictionary in PythonConvert string to JSON in PythonDBSCAN algorithm in PythonHow to Write a Code for Printing the Python Exception/Error HierarchyPrincipal Component Analysis (PCA) with PythonPython Program to Find Number of Days Between Two Given DatesObject Recognition using PythonPython VLC moduleSet to list in PythonString to int in PythonInternet of Things with PythonPython pysftp moduleAmazing hacks of PythonAverage of list in PythonCheck Installed Modules in Pythonchoice() in PythonConvert List to dataframe in PythonConvert String to Float in PythonDecorators with Parameters in PythonDynamic Typing in PythonFabs in PythonHow to Remove Decimal in PythonPython ClosurePython Glob ModuleWriting a Python ModuleModules vs Packages in PythonSNMP module in PythonAverage of list in PythonAppend vs Extend vs Insert in PythonHow to Remove Duplicates from a list in PythonRemove Multiple Characters from a String in PythonShuffle in Pythonfloor() and ceil() Functions in Pythonsqrt(): Math Function of PythonPython yfinance ModuleDifflib module in PythonConvert the Column Type from String to Datetime Format in Pandas DataFramePython wxPython ModuleRandom Uniform PythonRelational Operators in PythonString to List in PythonChatbot in PythonHow to Convert float to int in PythonMultiply All Elements in list of Pythonmodule vs function in PythonReverse a tuple in PythonTuple to Dictionary in Pythondatetime.timedelta() Function of PythonPython Bio ModulePython Dash ModuleHow to Select rows in Pandas DataFrame Based on ConditionsTypecasting in PythonDateutil module in PythonGetpass module in PythonPython Wand libraryGenerate a QR Code using PythonBest Python PDF LibraryPython Cachetools ModulePython Cmdparser ModulePython Dash modulePython Emoji ModulePython Nmap ModulePython PyLab ModuleWorking with PDF files in PythonPDF Handling in PythonManipulating PDF using PythonList All Functions from a Python ModulePython list of DictionariesPython Shelve ModuleCreating Interactive PDF forms using PythonPython Newspaper ModuleHow to Connect Wi-Fi using PythonBest Python Libraries used for Ethical HackingWindows System Administration Management using PythonIndentation Error in PythonPython imaplib ModulePython lxml ModulePython MayaVi ModulePython os.listdir() methodPython Modules for AutomationData Visualization in Python using Bokeh LibraryHow to Plot glyphs over a Google Map by using Bokeh Library in PythonHow to Plot a Pie Chart using Bokeh Library in PythonHow to Read Contents of PDF using OCR in PythonGrammar and Spell Checker in PythonConverting HTML to PDF files using PythonReadlines in PythonHow to Plot Multiple Lines on a Graph Using Bokeh in Pythonbokeh.plotting.figure.circle_x() Function in Pythonbokeh.plotting.figure.diamond_cross() Function in PythonHow to Plot Rays on a Graph using Bokeh in PythonImage Steganography using PythonInconsistent use of tabs and spaces in indentationHow to Plot Multiple Plots using Bokeh in PythonHow to Make an Area Plot in Python using BokehPython ChemPy ModulePython memory-profiler ModulePython Phonenumbers ModulePython Platform ModuleTypeError string indices must be an integerTime Series Forecasting with Prophet in PythonPython Pexpect ModulePython Optparse Moduleint object is not iterablePython Peewee LibrarySome Cryptocurrency Libraries for PythonBuilding a Blockchain using PythonHuffman Coding using PythonNested Dictionary in PythonCollections.UserString in PythonHow to Customize Legends with MatplotlibMatplotlib legend in subplotMorphological Operations in Image Processing in PythonRole of Python in Artificial IntelligencePython Instagramy ModulePython pprint ModulePython PrimePy ModuleAndroid Development using PythonPython fbchat libraryArtificial Intelligence in Cybersecurity: Pitting Algorithms vs AlgorithmsUnderstanding The Recognition Pattern of Artificial IntelligenceWhen and How to Leverage Lambda Architecture in Big DataWhy Should We Learn Python for Data ScienceHow to Change the "legend" Position in MatplotlibHow to Check if Element Exists in List in PythonHow to Check Spellings of Given Words using Enchant in PythonPython Program to Count the Number of Matching Characters in a Pair of StringPing Pong Game Using Turtle in PythonPython Function to Display CalendarPython Program for Calculating the Sum of Squares of First n Natural NumbersPython Program for How to Check if a Given Number is Fibonacci Number or Notrandint() Function in PythonVisualize Tiff File using Matplotlib and GDAL in Pythonrarfile module in PythonStemming Words using PythonPython Program for Word Guessing GameBlockchain in Healthcare: Innovations & OpportunitiesSnake Game in Python using Turtle ModuleHow to Find Armstrong Numbers between two given IntegersCelery Tutorial Using PythonRSME - Root Mean Square Error in PythonBuilding a Twitter Bot using PythonPython Progressbar ModulePython Pronouncing ModulePython PyAutoGUI ModulePython Pyperclip ModuleHow to Generate UUID in PythonPython Top 10 Libraries to Learn in 2022Reading NetCDF Data using PythonThe reprlib module in PythonHow to take Multiple Input from User in PythonPython zlib LibraryPython Queue ModulePython YAML ParserEffective Root Searching Algorithms in PythonPython Bz2 ModulePython IPaddress ModulePython PyLint ModuleHow to Process XML in PythonBisect Algorithm Functions in PythonCreating and Updating PowerPoint Presentation using PythonHow to change the size of figure drawn with matplotlibKeyboard Module in PythonPython Pyfiglet ModuleCreating an MCQ Quiz Game in PythonStatistic with PythonWhat is GIL in PythonBasic Python for Java DevelopersHow to Download YouTube Videos Using Python ScriptsTraffic Flow Simulation in PythonHow to Merge and Sort Two Lists in PythonMetacharacters in PythonWrite the Python Program to Print All Possible Combination of IntegersModulo String Formatting in PythonCounters in PythonPython pyautogui LibraryHow to Draw the Mandelbrot Set in PythonPython Dbm ModuleWebcam Motion Detector in PythonGraphQL Implementation in DjangoHow to Implement Protobuf in PythonPyQt library in PythonHow to Prettify Data Structures with Pretty Print in PythonEncrypt a Password in Python Using bcryptPyramid Framework in PythonBuilding a Telegram bot using PythonWeb2py Framework in PythonPython os.chdir() MethodBalancing Parentheses in PythonHow to Provide Multiple Constructors in Python ClassesProfiling the Python codeBuild a Dice-Rolling Application with PythonEmail module in PythonEssential Recursion Programs in PythonHow to Design Hashset in PythonHow to Extract YouTube Data in PythonHow to Solve Stock Span Problem Using PythonSelection Sort in Pythoninfo() Function in PythonTwo Sum Problem: Python Solution of Two sum problem of Given ListWrite a Python Program to Check a List Contains Duplicate ElementWrite Python Program to Search an Element in Sorted ArrayPathlib module in PythonCreate a Real Time Voice Translator using PythonHow to Sort Tuple in PythonAdvantages of Python that made it so Popular and its Major ApplicationsLibrary in PythonPackages of Data Visualization in PythonPython Tkinter (GUI)Python TkinterTkinter ButtonTkinter CanvasTkinter CheckbuttonTkinter EntryTkinter FrameTkinter LabelTkinter ListboxTkinter MenubuttonTkinter MenuTkinter MessageTkinter RadiobuttonTkinter ScaleTkinter ScrollbarTkinter TextTkinter ToplevelTkinter SpinboxTkinter PanedWindowTkinter LabelFrameTkinter MessageBoxPython Web BlockerIntroductionBuilding Python ScriptScript Deployment on LinuxScript Deployment on WindowsPython MCQPython MCQPython MCQ Part 2Related TutorialsNumPy TutorialDjango TutorialFlask TutorialPandas TutorialPytorch TutorialPygame TutorialMatplotlib TutorialOpenCV TutorialOpenpyxl TutorialPython CGIPython Design PatternPython ProgramsPython Programsnext →← prevPython StringTill now, we have discussed numbers as the standard data-types in Python. In this section of the tutorial, we will discuss the most popular data type in Python, i.e., string.Python string is the collection of the characters surrounded by single quotes, double quotes, or triple quotes. The computer does not understand the characters; internally, it stores manipulated character as the combination of the 0's and 1's.Each character is encoded in the ASCII or Unicode character. So we can say that Python strings are also called the collection of Unicode characters.In Python, strings can be created by enclosing the character or the sequence of characters in the quotes. Python allows us to use single quotes, double quotes, or triple quotes to create the string.Consider the following example in Python to create a string.Syntax: str = "Hi Python !" Here, if we check the type of the variable  using a Python scriptstr print(type(str)), then it will print a string (str). In Python, strings are treated as the sequence of characters, which means that Python doesn't support the character data-type; instead, a single character written as 'p' is treated as the string of length 1.Creating String in PythonWe can create a string by enclosing the characters in single-quotes or double- quotes. Python also provides triple-quotes to represent the string, but it is generally used for multiline string or .docstrings #Using single quotes str1 = 'Hello Python' print(str1) #Using double quotes str2 = "Hello Python" print(str2) #Using triple quotes str3 = '''Triple quotes are generally used for represent the multiline or docstring''' print(str3) Output:Hello Python Hello Python Triple quotes are generally used for represent the multiline or docstring Strings indexing and splittingLike other languages, the indexing of the Python strings starts from 0. For example, The string "HELLO" is indexed as given in the below figure.Consider the following example: str = "HELLO" print(str[0]) print(str[1]) print(str[2]) print(str[3]) print(str[4]) # It returns the IndexError because 6th index doesn't exist print(str[6]) Output:H E L L O IndexError: string index out of range As shown in Python, the slice operator [] is used to access the individual characters of the string. However, we can use the : (colon) operator in Python to access the substring from the given string. Consider the following example.Here, we must notice that the upper range given in the slice operator is always exclusive i.e., if str = 'HELLO' is given, then str[1:3] will always include str[1] = 'E', str[2] = 'L' and nothing else.Consider the following example: # Given String str = "JAVATPOINT" # Start Oth index to end print(str[0:]) # Starts 1th index to 4th index print(str[1:5]) # Starts 2nd index to 3rd index print(str[2:4]) # Starts 0th to 2nd index print(str[:3]) #Starts 4th to 6th index print(str[4:7]) Output:JAVATPOINT AVAT VA JAV TPO We can do the negative slicing in the string; it starts from the rightmost character, which is indicated as -1. The second rightmost index indicates -2, and so on. Consider the following image.Consider the following example str = 'JAVATPOINT' print(str[-1]) print(str[-3]) print(str[-2:]) print(str[-4:-1]) print(str[-7:-2]) # Reversing the given string print(str[::-1]) print(str[-12]) Output:T I NT OIN ATPOI TNIOPTAVAJ IndexError: string index out of range Reassigning StringsUpdating the content of the strings is as easy as assigning it to a new string. The string object doesn't support item assignment i.e., A string can only be replaced with new string since its content cannot be partially replaced. Strings are immutable in Python.Consider the following example.Example 1 str = "HELLO" str[0] = "h" print(str) Output:Traceback (most recent call last): File "12.py", line 2, in <module> str[0] = "h"; TypeError: 'str' object does not support item assignment However, in example 1, the string  can be assigned completely to a new content as specified in the following example.strExample 2 str = "HELLO" print(str) str = "hello" print(str) Output:HELLO hello Deleting the StringAs we know that strings are immutable. We cannot delete or remove the characters from the string.  But we can delete the entire string using the  keyword.del str = "JAVATPOINT" del str[1] Output:TypeError: 'str' object doesn't support item deletion Now we are deleting entire string. str1 = "JAVATPOINT" del str1 print(str1) Output:NameError: name 'str1' is not defined String OperatorsOperatorDescription+It is known as concatenation operator used to join the strings given either side of the operator. *It is known as repetition operator. It concatenates the multiple copies of the same string. []It is known as slice operator. It is used to access the sub-strings of a particular string. [:]It is known as range slice operator. It is used to access the characters from the specified range. inIt is known as membership operator. It returns if a particular sub-string is present in the specified string. not in It is also a membership operator and does the exact reverse of in. It returns true if a particular substring is not present in the specified string. r/RIt is used to specify the raw string. Raw strings are used in the cases where we need to print the actual meaning of escape characters such as "C://python". To define any string as a raw string, the character r or R is followed by the string. %It is used to perform string formatting. It makes use of the format specifiers used in C programming like %d or %f to map their values in python. We will discuss how formatting is done in python. ExampleConsider the following example to understand the real use of Python operators. str = "Hello" str1 = " world" print(str*3) # prints HelloHelloHello print(str+str1)# prints Hello world print(str[4]) # prints o print(str[2:4]); # prints ll print('w' in str) # prints false as w is not present in str print('wo' not in str1) # prints false as wo is present in str1. print(r'C://python37') # prints C://python37 as it is written print("The string str : %s"%(str)) # prints The string str : Hello Output:HelloHelloHello Hello world o ll False False C://python37 The string str : Hello Python String FormattingEscape SequenceLet's suppose we need to write the text as - They said, "Hello what's going on?"- the given statement can be written in single quotes or double quotes but it will raise the  as it contains both single and double-quotes.SyntaxErrorExample Consider the following example to understand the real use of Python operators.  str = "They said, "Hello what's going on?"" print(str) Output:SyntaxError: invalid syntax We can use the triple quotes to accomplish this problem but Python provides the escape sequence.The backslash(/) symbol denotes the escape sequence. The backslash can be followed by a special character and it interpreted differently. The single quotes inside the string must be escaped. We can apply the same as in the double quotes.Example - # using triple quotes print('''They said, "What's there?"''') # escaping single quotes print('They said, "What\'s going on?"') # escaping double quotes print("They said, \"What's going on?\"") Output:They said, "What's there?" They said, "What's going on?" They said, "What's going on?" The list of an escape sequence is given below:Sr.Escape SequenceDescriptionExample1.\newlineIt ignores the new line.print("Python1 \ Python2 \ Python3")Output:Python1 Python2 Python32.\\Backslashprint("\\")Output:\3.\'Single Quotesprint('\'')Output:'4.\\''Double Quotesprint("\"")Output:"5.\aASCII Bellprint("\a")6.\bASCII Backspace(BS)print("Hello \b World")Output:Hello World7.\fASCII Formfeedprint("Hello \f World!") Hello World!8.\nASCII Linefeedprint("Hello \n World!")Output:Hello World!9.\rASCII Carriege Return(CR)print("Hello \r World!")Output:World!10.\tASCII Horizontal Tabprint("Hello \t World!")Output:Hello World!11.\vASCII Vertical Tabprint("Hello \v World!")Output:Hello World!12.\oooCharacter with octal valueprint("\110\145\154\154\157")Output:Hello13\xHHCharacter with hex value.print("\x48\x65\x6c\x6c\x6f")Output:HelloHere is the simple example of escape sequence. print("C:\\Users\\DEVANSH SHARMA\\Python32\\Lib") print("This is the \n multiline quotes") print("This is \x48\x45\x58 representation") Output:C:\Users\DEVANSH SHARMA\Python32\Lib This is the multiline quotes This is HEX representation We can ignore the escape sequence from the given string by using the raw string. We can do this by writing  or  in front of the string. Consider the following example.rR print(r"C:\\Users\\DEVANSH SHARMA\\Python32") Output:C:\\Users\\DEVANSH SHARMA\\Python32 The format() methodThe  method is the most flexible and useful method in formatting strings. The curly braces {} are used as the placeholder in the string and replaced by the  method argument. Let's have a look at the given an example:format()format() # Using Curly braces print("{} and {} both are the best friend".format("Devansh","Abhishek")) #Positional Argument print("{1} and {0} best players ".format("Virat","Rohit")) #Keyword Argument print("{a},{b},{c}".format(a = "James", b = "Peter", c = "Ricky")) Output:Devansh and Abhishek both are the best friend Rohit and Virat best players James,Peter,Ricky Python String Formatting Using % OperatorPython allows us to use the format specifiers used in C's printf statement. The format specifiers in Python are treated in the same way as they are treated in C. However, Python provides an additional operator %, which is used as an interface between the format specifiers and their values. In other words, we can say that it binds the format specifiers to the values.Consider the following example. Integer = 10; Float = 1.290 String = "Devansh" print("Hi I am Integer ... My value is %d\nHi I am float ... My value is %f\nHi I am string ... My value is %s"%(Integer,Float,String)) Output:Hi I am Integer ... My value is 10 Hi I am float ... My value is 1.290000 Hi I am string ... My value is Devansh Python String functionsPython provides various in-built functions that are used for string handling. Many String funMethod Descriptioncapitalize()It capitalizes the first character of the String. This function is deprecated in python3casefold()It returns a version of s suitable for case-less comparisons. center(width ,fillchar)It returns a space padded string with the original string centred with equal number of left and right spaces. count(string,begin,end)It counts the number of occurrences of a substring in a String between begin and end index.decode(encoding = 'UTF8', errors = 'strict')Decodes the string using codec registered for encoding. encode()Encode S using the codec registered for encoding. Default encoding is 'utf-8'. endswith(suffix ,begin=0,end=len(string))It returns a Boolean value if the string terminates with given suffix between begin and end.expandtabs(tabsize = 8)It defines tabs in string to multiple spaces. The default space value is 8.find(substring ,beginIndex, endIndex)It returns the index value of the string where substring is found between begin index and end index.format(value)It returns a formatted version of S, using the passed value. index(subsring, beginIndex, endIndex)It throws an exception if string is not found. It works same as find() method.isalnum()It returns true if the characters in the string are alphanumeric i.e., alphabets or numbers and there is at least 1 character. Otherwise, it returns false.isalpha()It returns true if all the characters are alphabets and there is at least one character, otherwise False.isdecimal()It returns true if all the characters of the string are decimals. isdigit()It returns true if all the characters are digits and there is at least one character, otherwise False.isidentifier()It returns true if the string is the valid identifier. islower()It returns true if the characters of a string are in lower case, otherwise false.isnumeric()It returns true if the string contains only numeric characters. isprintable()It returns true if all the characters of s are printable or s is empty, false otherwise. isupper()It returns false if characters of a string are in Upper case, otherwise False.isspace()It returns true if the characters of a string are white-space, otherwise false.istitle()It returns true if the string is titled properly and false otherwise. A title string is the one in which the first character is upper-case whereas the other characters are lower-case. isupper()It returns true if all the characters of the string(if exists) is true otherwise it returns false. join(seq)It merges the strings representation of the given sequence. len(string)It returns the length of a string.ljust(width[,fillchar])It returns the space padded strings with the original string left justified to the given width. lower()It converts all the characters of a string to Lower case.lstrip()It removes all leading whitespaces of a string and can also be used to remove particular character from leading.partition()It searches for the separator sep in S, and returns the part before it, the separator itself, and the part after it. If the separator is not found, return S and two empty strings.maketrans()It returns a translation table to be used in translate function. replace(old,new[,count]) It replaces the old sequence of characters with the new sequence. The max characters are replaced if max is given. rfind(str,beg=0,end=len(str))It is similar to find but it traverses the string in backward direction. rindex(str,beg=0,end=len(str))It is same as index but it traverses the string in backward direction. rjust(width,[,fillchar])Returns a space padded string having original string right justified to the number of characters specified. rstrip()It removes all trailing whitespace of a string and can also be used to remove particular character from trailing.rsplit(sep=None, maxsplit = -1)It is same as split() but it processes the string from the backward direction. It returns the list of words in the string. If Separator is not specified then the string splits according to the white-space. split(str,num=string.count(str)) Splits the string according to the delimiter str. The string splits according to the space if the delimiter is not provided. It returns the list of substring concatenated with the delimiter. splitlines(num=string.count('\n'))It returns the list of strings at each line with newline removed. startswith(str,beg=0,end=len(str))It returns a Boolean value if the string starts with given str between begin and end. strip([chars]) It is used to perform lstrip() and rstrip() on the string. swapcase()It inverts case of all characters in a string.title() It is used to convert the string into the title-case i.e., The string  will be converted to Meerut. meEruTtranslate(table,deletechars = '')It translates the string according to the translation table passed in the function . upper()It converts all the characters of a string to Upper Case.zfill(width)Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).rpartition()Next TopicPython Lists← prevnext → For Videos Join Our Youtube Channel:  Join NowFeedbackSend your Feedback to [email protected]Help Others, Please ShareLearn Latest TutorialsSplunkSPSSSwaggerTransact-SQLTumblrReactJSRegexReinforcement LearningR ProgrammingRxJSReact NativePython Design PatternsPython PillowPython TurtleKerasPreparationAptitudeReasoningVerbal AbilityInterview QuestionsCompany QuestionsTrending TechnologiesArtificial IntelligenceAWSSeleniumCloud ComputingHadoopReactJSData ScienceAngular 7BlockchainGitMachine LearningDevOpsB.Tech / MCADBMSData StructuresDAAOperating SystemComputer NetworkCompiler DesignComputer OrganizationDiscrete MathematicsEthical HackingComputer GraphicsSoftware EngineeringWeb TechnologyCyber SecurityAutomataC ProgrammingC++Java.NetPythonProgramsControl SystemData MiningData WarehouseJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on , to get more information about given services. [email protected]Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at Duration: 1 week to 2 week[email protected]Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact UsSubscribe UsPrivacy PolicySitemapAbout Me© Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.