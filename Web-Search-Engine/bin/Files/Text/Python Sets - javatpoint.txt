Python Sets - javatpoint⇧ SCROLL TO TOP Home Python If Else For Loop Function Array String Regex List Set Tuple Dictionary Programs Numpy Interview QuestionsPython TutorialPython TutorialPython FeaturesPython HistoryPython ApplicationsPython InstallPython ExamplePython VariablesPython Data TypesPython KeywordsPython LiteralsPython OperatorsPython CommentsPython If elsePython LoopsPython For LoopPython While LoopPython BreakPython ContinuePython PassPython StringsPython ListsPython TuplesPython List Vs TuplePython SetsPython DictionaryPython FunctionsPython Built-in FunctionsPython Lambda FunctionsPython Files I/OPython ModulesPython ExceptionsPython DatePython RegexPython Sending EmailRead CSV FileWrite CSV FileRead Excel FileWrite Excel FilePython AssertPython List ComprehensionPython Collection ModulePython Math ModulePython OS ModulePython Random ModulePython Statistics ModulePython Sys ModulePython IDEsPython ArraysCommand Line ArgumentsPython Magic MethodPython Stack & QueuePySpark MLlibPython DecoratorPython GeneratorsWeb Scraping Using PythonPython JSONPython ItertoolsPython MultiprocessingHow to Calculate Distance between Two Points using GEOPYGmail API in PythonHow to Plot the Google Map using folium package in PythonGrid Search in PythonPython High Order Functionnsetools in PythonPython program to find the nth Fibonacci NumberPython OpenCV object detectionPython SimpleImputer moduleSecond Largest Number in PythonPython OOPsPython OOPs ConceptsPython Object ClassPython ConstructorsPython InheritanceAbstraction in PythonPython MySQLEnvironment SetupDatabase ConnectionCreating New DatabaseCreating TablesInsert OperationRead OperationUpdate OperationJoin OperationPerforming TransactionsPython MongoDBPython MongoDBPython SQLitePython SQLitePython Questions. How to install Python in WindowsHow to reverse a string in PythonHow to read CSV file in PythonHow to run Python ProgramHow to take input in PythonHow to convert list to string in PythonHow to append element in the listHow to compare two lists in PythonHow to convert int to string in PythonHow to create a dictionary in PythonHow to create a virtual environment in PythonHow to declare a variable in PythonHow to install matplotlib in PythonHow to install OpenCV in PythonHow to print in same line in PythonHow to read JSON file in PythonHow to read a text file in PythonHow to use for loop in PythonIs Python scripting languageHow long does it take to learn PythonHow to concatenate two strings in PythonHow to connect Database in PythonHow to convert list to dictionary in PythonHow to declare a global variable in PythonHow to reverse a number in PythonWhat is an object in PythonWhich is the fastest implementation of PythonHow to clear Python shellHow to create a DataFrames in PythonHow to develop a game in PythonHow to install Tkinter in PythonHow to plot a graph in PythonHow to print pattern in PythonHow to remove an element from a list in PythonHow to Round number in PythonHow to sort a dictionary in PythonStrong Number in PythonHow to Convert Text to Speech in Python Bubble Sort in PythonLogging in PythonInsertion Sort in PythonBinary Search in PythonLinear Search in PythonPython vs ScalaQueue in PythonStack in PythonHeap Sort in PythonPalindrome program in pythonProgram of Cumulative sum in pythonMerge Sort in PythonPython MatrixPython Unit TestingForensics & VirtualizationBest Books to Learn PythonBest Books to Learn DjangoGCD of two number in pythonPython Program to generate a Random StringHow to One Hot Encode Sequence Data in PythonHow to write square root in PythonPointer in PythonPython 2D arrayPython Memory ManagementPython Libraries for Data VisualizationHow to call a function in PythonGit Modules in PythonTop Python Frameworks for GamingPython Audio ModulesWikipedia Module in PythonPython random randrange()Permutation and Combination in PythonGetopt module in PythonMerge two Dictionaries in PythonMultithreading in Python 3Static in PythonHow to get the current date in Pythonargparse in PythonPython tqdm ModuleCaesar Cipher in PythonTokenizer in PythonHow to add two lists in PythonShallow Copy and Deep Copy in PythonAtom PythonContains in PythonLabel Encoding in PythonDjango vs. Node JSPython FrameworksHow to create a vector in Python using NumPyPickle Module of PythonHow to convert Bytes to string in PythonPython Program to Find AnagramHow to convert List to SetPython vs JavaScriptPython Holidays ModuleFuzzyWuzzy Python LibraryDask PythonDask Python (Part 2)Mode in PythonMenu-Driven Programs in PythonPython Array vs. ListWhat is duck typing in PythonPEP 8 in PythonPython User GroupsBasic Commands in PythonF String in PythonHow Brython WorksHow to use Brython in the BrowserArima Model in PythonPython Modulus OperatorMATLAB vs. PythonMethod Resolution Order in PythonMonkey Patching in PythonPython __call__ methodPython heapq modulePython SubstringProject ideas for Python BeginnersPython FakerFizz-Buzz Program in PythonTabula PythonPython Program to Print Prime Factor of Given NumberPython Program to Print Pascal TriangleNamedTuple in PythonOrderedDict in PythonT-Test in PythonPython return statementGetter and Setter in PythonEnum class in PythonDestructors in PythonCurve Fit in PythonConverting CSV to JSON in PythonUnderscore (_) in PythonSet vs List in PythonLocating and Executing ModulesFlatten List in PythonPair Plot in PythonData Hiding in PythonPython Program to Find Intersection of Two ListsHow to Create Requirements.txt File in PythonTic-Tac-Toe in PythonPython Asynchronous Programming - asyncio and awaitPython main() functionstrftime() function in PythonVerbose Flag in Python RegexPython AST ModulePython Requests Module - HTTP RequestShutil Module in PythonPython epoch to DatetimePython del StatementLooping technique in PythonMetaprogramming with Metaclasses in PythonPrecision Handling in PythonPython Join Liststrip() function in PythonGradient Descent AlgorithmPrettytable in PythonSentiment Analysis in PythonConvert Python List to NumPy ArraysTraceback in PythonTime clock() Method in PythonDeque in PythonDictionary Comprehension in PythonPython Data AnalyticsPython seek() MethodTernary Operator in PythonHow to Calculate the Area of the Circle using PythonHow to Write in Text File using PythonPython KeyErrorPython super() Functionmax() function in PythonFraction Module in PythonPopular Python Framework to Build APIHow to Check Python versionPython %s - String FormattingPython seaborn LibraryCountplot in Pythonrange() Vs. Xrange() PythonWordcloud Package in PythonConvert dataframe into listANOVA Test in PythonPython program to find compound interestAnsible in PythonPython Important Tips and TricksPython CoroutinesDouble Underscores in Pythonre.search() VS re.findall() in Python RegexHow to install statsmodels in PythonCos in Pythonvif in Python__add__ Method in PythonEthical Hacking with PythonClass Variable vs InstancePerfect Number in PythonEOL in PythonPython Program to convert Hexadecimal String to Decimal StringDifferent Methods in Python for Swapping Two Numbers without using third variableHow to Change Plot Size in MatplotlibHow to Get the Zip Code in PythonEel in PythonAssignment Operators in PythonSpeech Recognition pythonYield vs Return in PythonGraphene PythonName Mangling in PythonPython combination without itertoolsPython ComprehensionsInfluxDB in PythonKafka Tutorial in PythonAugmented Assignment Expressions in PythonPython (x,y) SoftwarePython Event-Driven programmingPython SemaphorePython sorted reverseAutomorphic Number in Pythonsizeof in PythonPython Program for accepting the strings which contains all vowelsClass-based views vs Function-Based ViewsHow to handle cookies in Djangoagg() function in PythonAmicable Numbers in PythonContext Manager in PythonCreate BMI Calculator using PythonString to Binary in PythonWhat is script mode in PythonBest Python libraries for Machine LearningPython Program to Display Calendar of Given YearHow to open URL in PythonBroken Pipe Error in PythonCode Template for Creating Objects in PythonPython program to calculate the best time to buy and sell stockTuple to String in PythonKadane's Algorithm in PythonLoggers in DjangoWeather App in DjangoMissing Data Conundrum: Exploration and Imputation TechniquesDifferent Methods of Array Rotation in PythonWhat is Operator Overloading in PythonDefaultdict in PythonOperator Module in PythonSpinner Widget in the kivy Library of PythonNumber Plate Recognition using PythonObfuscating a Python programConvert string to dictionary in PythonConvert string to JSON in PythonDBSCAN algorithm in PythonHow to Write a Code for Printing the Python Exception/Error HierarchyPrincipal Component Analysis (PCA) with PythonPython Program to Find Number of Days Between Two Given DatesObject Recognition using PythonPython VLC moduleSet to list in PythonString to int in PythonInternet of Things with PythonPython pysftp moduleAmazing hacks of PythonAverage of list in PythonCheck Installed Modules in Pythonchoice() in PythonConvert List to dataframe in PythonConvert String to Float in PythonDecorators with Parameters in PythonDynamic Typing in PythonFabs in PythonHow to Remove Decimal in PythonPython ClosurePython Glob ModuleWriting a Python ModuleModules vs Packages in PythonSNMP module in PythonAverage of list in PythonAppend vs Extend vs Insert in PythonHow to Remove Duplicates from a list in PythonRemove Multiple Characters from a String in PythonShuffle in Pythonfloor() and ceil() Functions in Pythonsqrt(): Math Function of PythonPython yfinance ModuleDifflib module in PythonConvert the Column Type from String to Datetime Format in Pandas DataFramePython wxPython ModuleRandom Uniform PythonRelational Operators in PythonString to List in PythonChatbot in PythonHow to Convert float to int in PythonMultiply All Elements in list of Pythonmodule vs function in PythonReverse a tuple in PythonTuple to Dictionary in Pythondatetime.timedelta() Function of PythonPython Bio ModulePython Dash ModuleHow to Select rows in Pandas DataFrame Based on ConditionsTypecasting in PythonDateutil module in PythonGetpass module in PythonPython Wand libraryGenerate a QR Code using PythonBest Python PDF LibraryPython Cachetools ModulePython Cmdparser ModulePython Dash modulePython Emoji ModulePython Nmap ModulePython PyLab ModuleWorking with PDF files in PythonPDF Handling in PythonManipulating PDF using PythonList All Functions from a Python ModulePython list of DictionariesPython Shelve ModuleCreating Interactive PDF forms using PythonPython Newspaper ModuleHow to Connect Wi-Fi using PythonBest Python Libraries used for Ethical HackingWindows System Administration Management using PythonIndentation Error in PythonPython imaplib ModulePython lxml ModulePython MayaVi ModulePython os.listdir() methodPython Modules for AutomationData Visualization in Python using Bokeh LibraryHow to Plot glyphs over a Google Map by using Bokeh Library in PythonHow to Plot a Pie Chart using Bokeh Library in PythonHow to Read Contents of PDF using OCR in PythonGrammar and Spell Checker in PythonConverting HTML to PDF files using PythonReadlines in PythonHow to Plot Multiple Lines on a Graph Using Bokeh in Pythonbokeh.plotting.figure.circle_x() Function in Pythonbokeh.plotting.figure.diamond_cross() Function in PythonHow to Plot Rays on a Graph using Bokeh in PythonImage Steganography using PythonInconsistent use of tabs and spaces in indentationHow to Plot Multiple Plots using Bokeh in PythonHow to Make an Area Plot in Python using BokehPython ChemPy ModulePython memory-profiler ModulePython Phonenumbers ModulePython Platform ModuleTypeError string indices must be an integerTime Series Forecasting with Prophet in PythonPython Pexpect ModulePython Optparse Moduleint object is not iterablePython Peewee LibrarySome Cryptocurrency Libraries for PythonBuilding a Blockchain using PythonHuffman Coding using PythonNested Dictionary in PythonCollections.UserString in PythonHow to Customize Legends with MatplotlibMatplotlib legend in subplotMorphological Operations in Image Processing in PythonRole of Python in Artificial IntelligencePython Instagramy ModulePython pprint ModulePython PrimePy ModuleAndroid Development using PythonPython fbchat libraryArtificial Intelligence in Cybersecurity: Pitting Algorithms vs AlgorithmsUnderstanding The Recognition Pattern of Artificial IntelligenceWhen and How to Leverage Lambda Architecture in Big DataWhy Should We Learn Python for Data ScienceHow to Change the "legend" Position in MatplotlibHow to Check if Element Exists in List in PythonHow to Check Spellings of Given Words using Enchant in PythonPython Program to Count the Number of Matching Characters in a Pair of StringPing Pong Game Using Turtle in PythonPython Function to Display CalendarPython Program for Calculating the Sum of Squares of First n Natural NumbersPython Program for How to Check if a Given Number is Fibonacci Number or Notrandint() Function in PythonVisualize Tiff File using Matplotlib and GDAL in Pythonrarfile module in PythonStemming Words using PythonPython Program for Word Guessing GameBlockchain in Healthcare: Innovations & OpportunitiesSnake Game in Python using Turtle ModuleHow to Find Armstrong Numbers between two given IntegersCelery Tutorial Using PythonRSME - Root Mean Square Error in PythonBuilding a Twitter Bot using PythonPython Progressbar ModulePython Pronouncing ModulePython PyAutoGUI ModulePython Pyperclip ModuleHow to Generate UUID in PythonPython Top 10 Libraries to Learn in 2022Reading NetCDF Data using PythonThe reprlib module in PythonHow to take Multiple Input from User in PythonPython zlib LibraryPython Queue ModulePython YAML ParserEffective Root Searching Algorithms in PythonPython Bz2 ModulePython IPaddress ModulePython PyLint ModuleHow to Process XML in PythonBisect Algorithm Functions in PythonCreating and Updating PowerPoint Presentation using PythonHow to change the size of figure drawn with matplotlibKeyboard Module in PythonPython Pyfiglet ModuleCreating an MCQ Quiz Game in PythonStatistic with PythonWhat is GIL in PythonBasic Python for Java DevelopersHow to Download YouTube Videos Using Python ScriptsTraffic Flow Simulation in PythonHow to Merge and Sort Two Lists in PythonMetacharacters in PythonWrite the Python Program to Print All Possible Combination of IntegersModulo String Formatting in PythonCounters in PythonPython pyautogui LibraryHow to Draw the Mandelbrot Set in PythonPython Dbm ModuleWebcam Motion Detector in PythonGraphQL Implementation in DjangoHow to Implement Protobuf in PythonPyQt library in PythonHow to Prettify Data Structures with Pretty Print in PythonEncrypt a Password in Python Using bcryptPyramid Framework in PythonBuilding a Telegram bot using PythonWeb2py Framework in PythonPython os.chdir() MethodBalancing Parentheses in PythonHow to Provide Multiple Constructors in Python ClassesProfiling the Python codeBuild a Dice-Rolling Application with PythonEmail module in PythonEssential Recursion Programs in PythonHow to Design Hashset in PythonHow to Extract YouTube Data in PythonHow to Solve Stock Span Problem Using PythonSelection Sort in Pythoninfo() Function in PythonTwo Sum Problem: Python Solution of Two sum problem of Given ListWrite a Python Program to Check a List Contains Duplicate ElementWrite Python Program to Search an Element in Sorted ArrayPathlib module in PythonCreate a Real Time Voice Translator using PythonHow to Sort Tuple in PythonAdvantages of Python that made it so Popular and its Major ApplicationsLibrary in PythonPackages of Data Visualization in PythonPython Tkinter (GUI)Python TkinterTkinter ButtonTkinter CanvasTkinter CheckbuttonTkinter EntryTkinter FrameTkinter LabelTkinter ListboxTkinter MenubuttonTkinter MenuTkinter MessageTkinter RadiobuttonTkinter ScaleTkinter ScrollbarTkinter TextTkinter ToplevelTkinter SpinboxTkinter PanedWindowTkinter LabelFrameTkinter MessageBoxPython Web BlockerIntroductionBuilding Python ScriptScript Deployment on LinuxScript Deployment on WindowsPython MCQPython MCQPython MCQ Part 2Related TutorialsNumPy TutorialDjango TutorialFlask TutorialPandas TutorialPytorch TutorialPygame TutorialMatplotlib TutorialOpenCV TutorialOpenpyxl TutorialPython CGIPython Design PatternPython ProgramsPython Programsnext →← prevPython Set A Python set is the collection of the unordered items. Each element in the set must be unique, immutable, and the sets remove the duplicate elements. Sets are mutable which means we can modify it after its creation.Unlike other collections in Python, there is no index attached to the elements of the set, i.e., we cannot directly access any element of the set by the index. However, we can print them all together, or we can get the list of elements by looping through the set.Creating a setThe set can be created by enclosing the comma-separated immutable items with the curly braces {}. Python also provides the set() method, which can be used to create the set by the passed sequence.Example 1: Using curly braces Days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"} print(Days) print(type(Days)) print("looping through the set elements ... ") for i in Days: print(i) Output:{'Friday', 'Tuesday', 'Monday', 'Saturday', 'Thursday', 'Sunday', 'Wednesday'} <class 'set'> looping through the set elements ... Friday Tuesday Monday Saturday Thursday Sunday Wednesday Example 2: Using set() method Days = set(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]) print(Days) print(type(Days)) print("looping through the set elements ... ") for i in Days: print(i) Output:{'Friday', 'Wednesday', 'Thursday', 'Saturday', 'Monday', 'Tuesday', 'Sunday'} <class 'set'> looping through the set elements ... Friday Wednesday Thursday Saturday Monday Tuesday Sunday It can contain any type of element such as integer, float, tuple etc. But mutable elements (list, dictionary, set) can't be a member of set. Consider the following example. # Creating a set which have immutable elements set1 = {1,2,3, "JavaTpoint", 20.5, 14} print(type(set1)) #Creating a set which have mutable element set2 = {1,2,3,["Javatpoint",4]} print(type(set2)) Output:<class 'set'> Traceback (most recent call last) <ipython-input-5-9605bb6fbc68> in <module> 4 5 #Creating a set which holds mutable elements ----> 6 set2 = {1,2,3,["Javatpoint",4]} 7 print(type(set2)) TypeError: unhashable type: 'list' In the above code, we have created two sets, the set  have immutable elements and set2 have one mutable element as a list. While checking the type of set2, it raised an error, which means set can contain only immutable elements.set1Creating an empty set is a bit different because empty curly {} braces are also used to create a dictionary as well. So Python provides the set() method used without an argument to create an empty set. # Empty curly braces will create dictionary set3 = {} print(type(set3)) # Empty set using set() function set4 = set() print(type(set4)) Output:<class 'dict'> <class 'set'> Let's see what happened if we provide the duplicate element to the set. set5 = {1,2,4,4,5,8,9,9,10} print("Return set with unique elements:",set5) Output:Return set with unique elements: {1, 2, 4, 5, 8, 9, 10} In the above code, we can see that  consisted of multiple duplicate elements when we printed it remove the duplicity from the set.set5Adding items to the setPython provides the  method and  method which can be used to add some particular item to the set. The add() method is used to add a single element whereas the update() method is used to add multiple elements to the set. Consider the following example.add()update()Example: 1 - Using add() method Months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(months) print("\nAdding other months to the set..."); Months.add("July"); Months.add ("August"); print("\nPrinting the modified set..."); print(Months) print("\nlooping through the set elements ... ") for i in Months: print(i) Output:printing the original set ... {'February', 'May', 'April', 'March', 'June', 'January'} Adding other months to the set... Printing the modified set... {'February', 'July', 'May', 'April', 'March', 'August', 'June', 'January'} looping through the set elements ... February July May April March August June January To add more than one item in the set, Python provides the  method. It accepts iterable as an argument.update()Consider the following example.Example - 2 Using update() function Months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(Months) print("\nupdating the original set ... ") Months.update(["July","August","September","October"]); print("\nprinting the modified set ... ") print(Months); Output:printing the original set ... {'January', 'February', 'April', 'May', 'June', 'March'} updating the original set ... printing the modified set ... {'January', 'February', 'April', 'August', 'October', 'May', 'June', 'July', 'September', 'March'} Removing items from the setPython provides the  method and  method which can be used to remove the items from the set. The difference between these function, using discard() function if the item does not exist in the set then the set remain unchanged whereas remove() method will through an error.discard()remove()Consider the following example.Example-1 Using discard() method months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(months) print("\nRemoving some months from the set..."); months.discard("January"); months.discard("May"); print("\nPrinting the modified set..."); print(months) print("\nlooping through the set elements ... ") for i in months: print(i) Output:printing the original set ... {'February', 'January', 'March', 'April', 'June', 'May'} Removing some months from the set... Printing the modified set... {'February', 'March', 'April', 'June'} looping through the set elements ... February March April June Python provides also the  method to remove the item from the set. Consider the following example to remove the items using  method.remove()remove()Example-2 Using remove() function months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(months) print("\nRemoving some months from the set..."); months.remove("January"); months.remove("May"); print("\nPrinting the modified set..."); print(months) Output:printing the original set ... {'February', 'June', 'April', 'May', 'January', 'March'} Removing some months from the set... Printing the modified set... {'February', 'June', 'April', 'March'} We can also use the pop() method to remove the item. Generally, the pop() method will always remove the last item but the set is unordered, we can't determine which element will be popped from set.Consider the following example to remove the item from the set using pop() method. Months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(Months) print("\nRemoving some months from the set..."); Months.pop(); Months.pop(); print("\nPrinting the modified set..."); print(Months) Output:printing the original set ... {'June', 'January', 'May', 'April', 'February', 'March'} Removing some months from the set... Printing the modified set... {'May', 'April', 'February', 'March'} In the above code, the last element of the  set is  but the pop() method removed the  because the set is unordered and the pop() method could not determine the last element of the set.MonthMarchJune and JanuaryPython provides the clear() method to remove all the items from the set.Consider the following example. Months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(Months) print("\nRemoving all the items from the set..."); Months.clear() print("\nPrinting the modified set...") print(Months) Output:printing the original set ... {'January', 'May', 'June', 'April', 'March', 'February'} Removing all the items from the set... Printing the modified set... set() Difference between discard() and remove()Despite the fact that  and  method both perform the same task, There is one main difference between discard() and remove().discard()remove()If the key to be deleted from the set using discard() doesn't exist in the set, the Python will not give the error. The program maintains its control flow.On the other hand, if the item to be deleted from the set using remove() doesn't exist in the set, the Python will raise an error.Consider the following example.Example- Months = set(["January","February", "March", "April", "May", "June"]) print("\nprinting the original set ... ") print(Months) print("\nRemoving items through discard() method..."); Months.discard("Feb"); #will not give an error although the key feb is not available in the set print("\nprinting the modified set...") print(Months) print("\nRemoving items through remove() method..."); Months.remove("Jan") #will give an error as the key jan is not available in the set. print("\nPrinting the modified set...") print(Months) Output:printing the original set ... {'March', 'January', 'April', 'June', 'February', 'May'} Removing items through discard() method... printing the modified set... {'March', 'January', 'April', 'June', 'February', 'May'} Removing items through remove() method... Traceback (most recent call last): File "set.py", line 9, in Months.remove("Jan") KeyError: 'Jan' Python Set OperationsSet can be performed mathematical operation such as union, intersection, difference, and symmetric difference. Python provides the facility to carry out these operations with operators or methods. We describe these operations as follows.Union of two SetsThe union of two sets is calculated by using the pipe (|) operator. The union of the two sets contains all the items that are present in both the sets.Consider the following example to calculate the union of two sets.Example 1: using union | operator Days1 = {"Monday","Tuesday","Wednesday","Thursday", "Sunday"} Days2 = {"Friday","Saturday","Sunday"} print(Days1|Days2) #printing the union of the sets Output:{'Friday', 'Sunday', 'Saturday', 'Tuesday', 'Wednesday', 'Monday', 'Thursday'} Python also provides the  method which can also be used to calculate the union of two sets. Consider the following example.union()Example 2: using union() method Days1 = {"Monday","Tuesday","Wednesday","Thursday"} Days2 = {"Friday","Saturday","Sunday"} print(Days1.union(Days2)) #printing the union of the sets Output:{'Friday', 'Monday', 'Tuesday', 'Thursday', 'Wednesday', 'Sunday', 'Saturday'} Intersection of two setsThe intersection of two sets can be performed by the  operator or the . The intersection of the two sets is given as the set of the elements that common in both sets.and &intersection() functionConsider the following example.Example 1: Using & operator Days1 = {"Monday","Tuesday", "Wednesday", "Thursday"} Days2 = {"Monday","Tuesday","Sunday", "Friday"} print(Days1&Days2) #prints the intersection of the two sets Output:{'Monday', 'Tuesday'} Example 2: Using intersection() method set1 = {"Devansh","John", "David", "Martin"} set2 = {"Steve", "Milan", "David", "Martin"} print(set1.intersection(set2)) #prints the intersection of the two sets Output:{'Martin', 'David'} Example 3: set1 = {1,2,3,4,5,6,7} set2 = {1,2,20,32,5,9} set3 = set1.intersection(set2) print(set3) Output:{1,2,5} The intersection_update() methodThe  method removes the items from the original set that are not present in both the sets (all the sets if more than one are specified).intersection_update()The  method is different from the intersection() method since it modifies the original set by removing the unwanted items, on the other hand, the intersection() method returns a new set.intersection_update()Consider the following example. a = {"Devansh", "bob", "castle"} b = {"castle", "dude", "emyway"} c = {"fuson", "gaurav", "castle"} a.intersection_update(b, c) print(a) Output:{'castle'} Difference between the two setsThe difference of two sets can be calculated by using the subtraction (-) operator or  method. Suppose there are two sets A and B, and the difference is A-B that denotes the resulting set will be obtained that element of A, which is not present in the set B.intersection()Consider the following example.Example 1 : Using subtraction ( - ) operator Days1 = {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 = {"Monday", "Tuesday", "Sunday"} print(Days1-Days2) #{"Wednesday", "Thursday" will be printed} Output:{'Thursday', 'Wednesday'} Example 2 : Using difference() method Days1 = {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 = {"Monday", "Tuesday", "Sunday"} print(Days1.difference(Days2)) # prints the difference of the two sets Days1 and Days2 Output:{'Thursday', 'Wednesday'} Symmetric Difference of two setsThe symmetric difference of two sets is calculated by ^ operator or  method. Symmetric difference of sets, it removes that element which is present in both sets. Consider the following example:symmetric_difference()Example - 1: Using ^ operator a = {1,2,3,4,5,6} b = {1,2,9,8,10} c = a^b print(c) Output:{3, 4, 5, 6, 8, 9, 10} Example - 2: Using symmetric_difference() method a = {1,2,3,4,5,6} b = {1,2,9,8,10} c = a.symmetric_difference(b) print(c) Output:{3, 4, 5, 6, 8, 9, 10} Set comparisonsPython allows us to use the comparison operators i.e., <, >, <=, >= , == with the sets by using which we can check whether a set is a subset, superset, or equivalent to other set. The boolean true or false is returned depending upon the items present inside the sets.Consider the following example. Days1 = {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 = {"Monday", "Tuesday"} Days3 = {"Monday", "Tuesday", "Friday"} #Days1 is the superset of Days2 hence it will print true. print (Days1>Days2) #prints false since Days1 is not the subset of Days2 print (Days1<Days2) #prints false since Days2 and Days3 are not equivalent print (Days2 == Days3) Output:True False False FrozenSetsThe frozen sets are the immutable form of the normal sets, i.e., the items of the frozen set cannot be changed and therefore it can be used as a key in the dictionary.The elements of the frozen set cannot be changed after the creation. We cannot change or append the content of the frozen sets by using the methods like add() or remove().The frozenset() method is used to create the frozenset object. The iterable sequence is passed into this method which is converted into the frozen set as a return type of the method.Consider the following example to create the frozen set. Frozenset = frozenset([1,2,3,4,5]) print(type(Frozenset)) print("\nprinting the content of frozen set...") for i in Frozenset: print(i); Frozenset.add(6) #gives an error since we cannot change the content of Frozenset after creation Output:<class 'frozenset'> printing the content of frozen set... 1 2 3 4 5 Traceback (most recent call last): File "set.py", line 6, in <module> Frozenset.add(6) #gives an error since we can change the content of Frozenset after creation AttributeError: 'frozenset' object has no attribute 'add' Frozenset for the dictionaryIf we pass the dictionary as the sequence inside the frozenset() method, it will take only the keys from the dictionary and returns a frozenset that contains the key of the dictionary as its elements.Consider the following example. Dictionary = {"Name":"John", "Country":"USA", "ID":101} print(type(Dictionary)) Frozenset = frozenset(Dictionary); #Frozenset will contain the keys of the dictionary print(type(Frozenset)) for i in Frozenset: print(i) Output:<class 'dict'> <class 'frozenset'> Name Country ID Set Programming Example Write a program to remove the given number from the set.Example - 1: my_set = {1,2,3,4,5,6,12,24} n = int(input("Enter the number you want to remove")) my_set.discard(n) print("After Removing:",my_set) Output:Enter the number you want to remove:12 After Removing: {1, 2, 3, 4, 5, 6, 24}  Write a program to add multiple elements to the set.Example - 2: set1 = set([1,2,4,"John","CS"]) set1.update(["Apple","Mango","Grapes"]) print(set1) Output:{1, 2, 4, 'Apple', 'John', 'CS', 'Mango', 'Grapes'}  Write a program to find the union between two set.Example - 3: set1 = set(["Peter","Joseph", 65,59,96]) set2 = set(["Peter",1,2,"Joseph"]) set3 = set1.union(set2) print(set3) Output:{96, 65, 2, 'Joseph', 1, 'Peter', 59}  Write a program to find the intersection between two sets.Example- 4: set1 = {23,44,56,67,90,45,"Javatpoint"} set2 = {13,23,56,76,"Sachin"} set3 = set1.intersection(set2) print(set3) Output:{56, 23}  Write the program to add element to the frozenset.Example - 5: set1 = {23,44,56,67,90,45,"Javatpoint"} set2 = {13,23,56,76,"Sachin"} set3 = set1.intersection(set2) print(set3) Output:TypeError: 'frozenset' object does not support item assignment Above code raised an error because frozensets are immutable and can't be changed after creation. Write the program to find the issuperset, issubset and superset.Example - 6: set1 = set(["Peter","James","Camroon","Ricky","Donald"]) set2 = set(["Camroon","Washington","Peter"]) set3 = set(["Peter"]) issubset = set1 >= set2 print(issubset) issuperset = set1 <= set2 print(issuperset) issubset = set3 <= set2 print(issubset) issuperset = set2 >= set3 print(issuperset) Output:False False True True Python Built-in set methodsPython contains the following methods to be used with the sets. SNMethod Description1add(item)It adds an item to the set. It has no effect if the item is already present in the set. 2clear()It deletes all the items from the set. 3copy()It returns a shallow copy of the set. 4difference_update(....)It modifies this set by removing all the items that are also present in the specified sets. 5discard(item)It removes the specified item from the set. 6intersection()It returns a new set that contains only the common elements of both the sets. (all the sets if more than two are specified). 7intersection_update(....)It removes the items from the original set that are not present in both the sets (all the sets if more than one are specified).8Isdisjoint(....)Return True if two sets have a null intersection.9Issubset(....)Report whether another set contains this set.10Issuperset(....)Report whether this set contains another set.11pop()Remove and return an arbitrary set element that is the last element of the set. Raises KeyError if the set is empty.12remove(item)Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.13symmetric_difference(....)Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.14symmetric_difference_update(....)Update a set with the symmetric difference of itself and another.15union(....)Return the union of sets as a new set.(i.e. all elements that are in either set.)16update()Update a set with the union of itself and others.Next TopicPython Dictionary← prevnext → For Videos Join Our Youtube Channel:  Join NowFeedbackSend your Feedback to [email protected]Help Others, Please ShareLearn Latest TutorialsSplunkSPSSSwaggerTransact-SQLTumblrReactJSRegexReinforcement LearningR ProgrammingRxJSReact NativePython Design PatternsPython PillowPython TurtleKerasPreparationAptitudeReasoningVerbal AbilityInterview QuestionsCompany QuestionsTrending TechnologiesArtificial IntelligenceAWSSeleniumCloud ComputingHadoopReactJSData ScienceAngular 7BlockchainGitMachine LearningDevOpsB.Tech / MCADBMSData StructuresDAAOperating SystemComputer NetworkCompiler DesignComputer OrganizationDiscrete MathematicsEthical HackingComputer GraphicsSoftware EngineeringWeb TechnologyCyber SecurityAutomataC ProgrammingC++Java.NetPythonProgramsControl SystemData MiningData WarehouseJavatpoint ServicesJavaTpoint offers too many high quality services. Mail us on , to get more information about given services. [email protected]Website DesigningWebsite DevelopmentJava DevelopmentPHP DevelopmentWordPressGraphic DesigningLogoDigital MarketingOn Page and Off Page SEOPPCContent DevelopmentCorporate TrainingClassroom and Online TrainingData EntryTraining For College CampusJavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at Duration: 1 week to 2 week[email protected]Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring TutorialOur WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.comOur ServicesWebsite DevelopmentAndroid DevelopmentWebsite DesigningDigital MarketingSummer TrainingIndustrial TrainingCollege Campus TrainingContactAddress: G-13, 2nd Floor, Sec-3Noida, UP, 201301, IndiaContact No: 0120-4256464, 9990449935Contact UsSubscribe UsPrivacy PolicySitemapAbout Me© Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.